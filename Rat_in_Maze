**********USING RECURSSION AND BACKTRACKING*****************
# include<bits/stdc++.h>
bool issafe(int row, int col, vector<vector<int>>&vis, vector<vector<int>>&mat, int n)
{
    if(row < n && row >=0 && col < n && col >=0 && vis[row][col] == 0 && mat[row][col] == 1)
    {
        return true;
    }

    return false;
}
void solve(vector<vector<int>>&mat, int n, string &path, vector<vector<int>>&vis,
 vector<string> &ans, int x, int y)
 {
     if(x == n-1 && y == n-1)
     {
         ans.push_back(path);
         return ;
     }
     vis[x][y] = 1;

     // case for down...
     int nx = x+1;
     int ny = y;

     if(issafe(nx, ny, vis, mat, n))
     {
         path.push_back('D');
         solve(mat, n, path, vis, ans, nx, ny);
         vis[nx][ny] = 0;
         path.pop_back();
     }


     // case for up
     nx = x-1;
     ny = y;
     if(issafe(nx, ny, vis, mat, n))
     {
         path.push_back('U');
         solve(mat, n, path, vis, ans, nx, ny);
                          vis[nx][ny] = 0;

         path.pop_back();
     }

     // case for left
     nx = x;
     ny = y-1;
      if(issafe(nx, ny, vis, mat, n))
     {
         path.push_back('L');
         solve(mat, n, path, vis, ans, nx, ny);
                 vis[nx][ny] = 0;
         path.pop_back();
     }
     

     // case for right

     nx = x;
     ny = y+1;
      if(issafe(nx, ny, vis, mat, n))
     {
         path.push_back('R');
         solve(mat, n, path, vis, ans, nx, ny);
                 vis[nx][ny] = 0;
         path.pop_back();
     }
 }
vector<string> ratMaze(vector<vector<int>> &mat) {
    vector<string> ans;
    int n = mat.size();
    vector<vector<int>> vis(n, vector<int>(n, 0));

    int x = 0;
    int y = 0;
    if(mat[0][0] == 0)
    {
        return ans;
    }
    string path="";
    solve(mat, n,path, vis, ans, x, y );
    sort(ans.begin(), ans.end());
    return ans;

}
