********APPROACH 1 FOR N_QUEENS1**************

void addsol(vector<vector<int>>&board, vector<vector<int>>&ans,int n)
{
    vector<int> temp;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            temp.push_back(board[i][j]);
        }
    }

    ans.push_back(temp);
}

bool issafe(int row, int col, vector<vector<int>>&board, int n)
{
    int x = row;
    int y = col;

    // check for same row
    while(y >=0 )
    {
        if(board[x][y] == 1)
        {
            return false;
        }
        y--;
    }

    x = row;
    y = col;
    while(x >=0 && y >=0 )
    {
        if(board[x][y] == 1)
        {
            return false;
        }

        x--;
        y--;
    }
    x = row;
    y = col;
    while(x<n && y>=0)
    {
          if(board[x][y] == 1)
        {
            return false;
        }

        x++;
        y--;
    }


    return true;
}
void solve(int col, vector<vector<int>>&board, vector<vector<int>>&ans, int n)
{
   if(col == n)
   {
       addsol(board, ans, n);
       return;
   }

   for(int row = 0; row<n;row++)
   {
       if(issafe(row, col, board,n))
       {
           board[row][col] = 1;
           solve(col+1,board,ans,n);
           board[row][col] = 0;
       }
   }
}
vector<vector<int>> solveNQueens(int n) {
    vector<vector<int>> ans;
    vector<vector<int>> board(n, vector<int>(n,0));
    solve(0,board, ans, n);
    return ans;
}
